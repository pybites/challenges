"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# AWS_ACCESS_KEY_ID = os.environ['ASIA4FHOJK3YOJVMVQMT']
# AWS_SECRET_ACCESS_KEY = os.environ['6U6/IQ/qIjsNPEK8kj4tK1htz7nNEzF28tV85uJ9']
AWS_STORAGE_BUCKET_NAME = 'bucketeer-ef830fab-c65d-403f-a86a-7fb94bd831be'
MEDIA_URL = 'http://%s.s3.amazonaws.com/media/' % AWS_STORAGE_BUCKET_NAME

# STATIC_URL = 'http://%s.s3.amazonaws.com/assets/' % AWS_STORAGE_BUCKET_NAME
STATIC_URL = '/static/'
# ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'

# DEFAULT_FILE_STORAGE = "storages.backends.s3boto.S3BotoStorage"


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MEDIA_DIR = os.path.join(BASE_DIR, 'media')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = ''

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'b0gx#(b3i#_pgqy)ogem install heroku9+sjx5sx#=7@vca)6@8nsxm3*udx%rreo')

# SECURITY WARNING: don't run with debug turned on in production!

# DEBUG = True
DEBUG = bool(os.environ.get('DJANGO_DEBUG', ''))
TEMPLATE_DEBUG = DEBUG
# heroku config:add DJANGO_DEBUG=true
# heroku config:remove DJANGO_DEBUG

ALLOWED_HOSTS = ['devayo.herokuapp.com', '127.0.0.1', ]

# Email
# Add your smtp details below
EMAIL_HOST = 'smtp.example.com'
EMAIL_HOST_USER = 'example@mail.example.com'
EMAIL_HOST_PASSWORD = '#'
EMAIL_PORT = 587
EMAIL_USE_TLA = True

SITE_ID = 1
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog.apps.BlogConfig',
    'taggit',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.postgres',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'blog/templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # or USING POSTGRESQL
        # 'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': '#',
        # 'USER': '#',
        # 'PASSWORD': '#',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'Africa/Bangui'
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_ROOT = MEDIA_DIR
# MEDIA_URL = '/media/'

DEFAULT_FILE_STORAGE = 'mysite.storage_backends.MediaStorage'

# MEDIA_URL = 'https://cloud-cube.s3.amazonaws.com/c014645wc1xh'

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'blog/static'),
# ]
#
# STATIC_URL = 'http://devayobucket.s3.amazonaws.com/'
# ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'
#
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#

# # The URL to use when referring to static files (where they will be served from)
# STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'blog/static'),
)

# Heroku: Update database configuration from $DATABASE_URL.
import dj_database_url

db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)

# CLOUDINARY_STORAGE = {
#     'CLOUD_NAME': 'habcl0usm',
#     'API_KEY': '256794385644786',
#     'API_SECRET': 'uAhY8MSjrASpppQmZEz6ynFKOmk',
# }
# DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# sudo lsof -t -i tcp:8000 | xargs kill -9
